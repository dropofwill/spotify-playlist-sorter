extends ./base.jade

block content

  h1 upm: docs
  h2 sort your Spotify playlists based on acoustic features

  h2 Architecture
  pre.
    ├── back
    │   └── lib
    │       ├── app.js     # Main Express logic and routes
    │       ├── config.js  # Variable used throughout
    │       ├── spotify.js # Authentication and Spotify query building
    │       └── utils.js   # Utility functions not specific to any part of the app
    ├── front
    │   ├── fonts
    │   ├── imgs
    │   ├── js
    │   │   ├── main.js           # Client side application flow, hash bang routing, etc.
    │   │   ├── spotify_client.js # Querying the spotify API from the client
    │   │   ├── templates.js      # Lodash templates for the frontend
    │   │   └── utils.js          # Utility methods used throughout the frontend
    │   └── styles
    │       └── main.css
    ├── index.html
    ├── package.json
    └── views
        ├── base.jade
        ├── docs.jade
        ├── index.jade
        ├── playlist.jade
        └── proposal.jade

  h2 Design Decisions

  p Went for a light, minimalist theme with colorful highlights that go along with the color schemes of Spotify and Echonest to create that association. Font used was Mark, chosen for the same aforementioned reasons.

  h2 Technical Decisions

  p Since I needed to do OAuth for the Spotify API, I decided against battling gibson and PHP and made an Node.js/Express server to handle authentication. Basically the server handles the OAuth login and callback from the Spotify and then serves the static templates.

  p The client saves the keys from the server in sessionStorage so that the client can do all the actual data gathering. Echonest just API key and no OAuth.

  h2 APIs used
  ul
    li 
      a(href='https://developer.spotify.com/web-api/working-with-playlists/') Spotify
    li
      a(href='http://developer.echonest.com/docs/v4') Echonest API

  h2 Extra HTML5 Browser Technology
  HTML5 sessionStorage - I store your login creds in sessionStorage, so that you don't have to reauthenticate on page reload.

  h2 Other cool stuff
  ul
    li Implemented OAuth 2.0 'authentication dance' to get access to private Spotify data
    li Saved access tokens in HTML5 sessionStorage, to preserve session state
    li Used hashbang routing to preserve back button functionality
    li Implemented recursive method for parsing paginated API responses
    li Used client side templating to describe the way JSON responses and HTML should be integrated more declaratively than simple string concatentation.
    li Implemented the drag-and-drop api on the 'tr' elements of a table

  h2 Credits
  h3 Frontend
  ul
    li JQuery - primarily ajax and the event abstraction (for hashbang)
    li LoDash - client-side templating and functional data manipulation
    li Url.js - for building up the ajax requests cleanly
    li FooTable - a sortable data grid

  h3 Backend
  ul
    li Node.js + Std Libs
    li Jade templates

  h3 Media
  ul
    li Ajax gif from <a href="http://www.ajaxload.info">ajaxload</a>.
  
  h3 Code concepts
  ul
    li For OAuth I learned a lot from the <a href="https://developer.spotify.com/web-api/authorization-guide/"authorization guide</a>, but implemented in my own way.
    li Used the <a href="http://www.ffmark.com">FF Mark font</a>
